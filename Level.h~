//Level.h
//12 4 2015

#include "Sprite.h"
#include "Block.h"
#include "mainFunctions.h"
#include <iostream>
#include <SDL2/SDL.h>
#include "Goomba.h"
#include <unistd.h>

using namespace std;

#ifndef LEVEL_H
#define LEVEL_H

class Level {
	public:
		Level();
		void playLevel();
		void display(); //displays on screen based on outputs
		void checks();
		void scrollScreen();
		
	protected:
		Sprite sp;
		
		int numBlocks;
		Block blk[100];
		SDL_Rect blockRect[100];
		SDL_Rect blockSrcRect[100];
		
		int numGoombas;
		Goomba goomba[500]; //500 is temp max
		SDL_Rect goombaRect[500];
		SDL_Rect goombaSrcRect[500];
		bool newGoomba;
		
		SDL_Rect srcRect;
		SDL_Rect dstRect;
		int mapDistMove;
		
		
};
#endif

Level::Level() {
	mapDistMove = 0;
	numBlocks = 100;
	numGoombas = 2;
	newGoomba = false;

	srcRect.x = 0;
	srcRect.y = 0;
	srcRect.h = 385;
	srcRect.w = 600;

	dstRect.x = 0;
	dstRect.y = 0;
	dstRect.h = 1000;
	dstRect.w = 1000;

	blk[0].setXpos(100);
	blk[0].setYpos(210);
	blk[1].setXpos(120);
	blk[1].setYpos(210);
	blk[2].setXpos(140);
	blk[2].setYpos(210);
	blk[3].setXpos(160);
	blk[3].setYpos(230);
	blk[4].setXpos(180);
	blk[4].setYpos(230);
	blk[5].setXpos(200);
	blk[5].setYpos(230);
	blk[6].setXpos(220);
	blk[6].setYpos(250);
	blk[7].setXpos(240);
	blk[7].setYpos(250);
	blk[8].setXpos(260);
	blk[8].setYpos(250);

	blk[9].setXpos(700);
	blk[9].setYpos(230);
	blk[10].setXpos(720);
	blk[10].setYpos(230);
	blk[11].setXpos(780);
	blk[11].setYpos(180);
	blk[12].setXpos(800);
	blk[12].setYpos(180);
	blk[13].setXpos(880);
	blk[13].setYpos(130);
	blk[14].setXpos(900);
	blk[14].setYpos(130);
	blk[15].setXpos(780);
	blk[15].setYpos(80);
	blk[16].setXpos(800);
	blk[16].setYpos(80);
	blk[17].setXpos(700);
	blk[17].setYpos(30);
	blk[18].setXpos(720);
	blk[18].setYpos(30);

	blk[19].setXpos(1400);
	blk[19].setYpos(250);
	blk[20].setXpos(1420);
	blk[20].setYpos(250);
	blk[21].setXpos(1440);
	blk[21].setYpos(250);
	blk[22].setXpos(1760);
	blk[22].setYpos(250);
	blk[23].setXpos(1780);
	blk[23].setYpos(250);
	blk[24].setXpos(1800);
	blk[24].setYpos(250);

	blk[25].setXpos(100);
	blk[25].setYpos(305);
	blk[26].setXpos(100);
	blk[26].setYpos(285);
	blk[27].setXpos(100);
	blk[27].setYpos(265);
	blk[28].setXpos(100);
	blk[28].setYpos(245);

	for(int i = 0; i < 500; i++){
		goomba[i].setX(570);//initialize all possible goombas
	}
	

}

void Level::playLevel() {
	bool quit = false;

	if( !init() ){
		printf( "Failed to initialize!\n" );
	} else {
		//Load media
		if( !loadMedia() ){
			printf( "Failed to load media!\n" );
		} else {
		SDL_Event e;//Event handler

		while(sp.getAliveStatus() && sp.getX() < 10050 - mapDistMove && !quit)  {
				while( SDL_PollEvent( &e ) != 0 ){//Handle events on queue

					switch(e.type){

					case SDL_QUIT: //User requests quit
						quit = true;
						break;

					case SDL_KEYDOWN:
						if(e.key.keysym.sym == SDLK_LEFT){
							sp.setMoveVar(1);  }
						if(e.key.keysym.sym == SDLK_RIGHT){
							//user moves right
							sp.setMoveVar(-1);
						}
						if(e.key.keysym.sym == SDLK_UP){
							if(!sp.inAir())
								sp.setDirection(1);  }
						if(e.key.keysym.sym == SDLK_DOWN){
							//user moves down
						}

						break;
						
					case SDL_KEYUP:
						if(e.key.keysym.sym == SDLK_LEFT)
							sp.setMoveVar(0);
						if(e.key.keysym.sym == SDLK_RIGHT)
							sp.setMoveVar(0);
						break;
					}//end switch
					
				}//end while
				sp.jump();
				sp.move();
				checks();
				scrollScreen();
				display();
				
				newGoomba = goomba[0].makeNewGoomba();
				
				if(newGoomba == true){
					newGoomba = false;
					goomba[0].setNewGoomba(false);
					numGoombas++;
					
				
				}
				
				for(int i = 0; i < numGoombas; i++)  {
					goomba[i].moveGoomba();
				}
				
			}//end while
		if(!quit)
			usleep(2000000);
	}	} // end elses
	close();
}

void Level::display() { //displays Sprite
	jumpImage == NULL;
	SDL_FillRect(gScreenSurface,NULL,0x000000);
	SDL_BlitSurface( gImage, &srcRect, gScreenSurface, &dstRect ); //Apply the image

	SDL_Rect heroSrcRect = sp.getHeroSrcRect();
	SDL_Rect heroRect = sp.getHeroRect();
	if(sp.getAliveStatus())  {
		if(sp.inAir())
			SDL_BlitSurface( jumpImage, &heroSrcRect, gScreenSurface, &heroRect );	
		else if(sp.getMoveVar()!= 0)
			SDL_BlitSurface( walkImage, &heroSrcRect, gScreenSurface, &heroRect );
		else
			SDL_BlitSurface( heroImage, &heroSrcRect, gScreenSurface, &heroRect );
	}
	else  {
		SDL_BlitSurface( blockImage, &heroSrcRect, gScreenSurface, &heroRect );	// change this image to dead image eventually
	}

	for(int i = 0; i < numBlocks; i++)  {
		blockRect[i].x = blk[i].getXpos();
		blockRect[i].y = blk[i].getYpos();
		blockSrcRect[i].w = blk[i].getWidth();
		blockSrcRect[i].h = blk[i].getHeight();
		blockSrcRect[i].x = 0;
		blockSrcRect[i].y = 0;
		SDL_BlitSurface( blockImage, &blockSrcRect[i], gScreenSurface, &blockRect[i] );
	}
	
	for(int i = 0; i < numGoombas; i++)  {
		goombaRect[i].x = goomba[i].getX();
		goombaRect[i].y = 302;
		goombaSrcRect[i].w = 24;
		goombaSrcRect[i].h = 24;
		goombaSrcRect[i].x = 0;
		goombaSrcRect[i].y = 0;
		
		
		if(goomba[i].dead() == false)	
			SDL_BlitSurface( goombaImage, &goombaSrcRect[i], gScreenSurface, &goombaRect[i] );
	}
	

	SDL_UpdateWindowSurface( gWindow );//Update the surface
}

void Level::checks()  {

	for(int i = 0; i < numBlocks; i++)  {
		if(blk[i].isHit(sp.getX()+4, sp.getY()) || blk[i].isHit(sp.getX()+20, sp.getY()))
			sp.setDirection(-1);

		if(blk[i].isOn(sp.getX()+4, sp.getY()+32) || blk[i].isOn(sp.getX()+20, sp.getY()+32)) {
			sp.setDirection(0);
			sp.resetJumpCounter();
		}

		if(blk[i].isHitLeft(sp.getX()+24, sp.getY()+16) && sp.getMoveVar() == -1)
			sp.setMoveVar(0);

		if(blk[i].isHitRight(sp.getX(), sp.getY()+16) && sp.getMoveVar() == 1)
			sp.setMoveVar(0);
	
	}
	
	for(int i = 0; i < numGoombas; i++)  {

		if(!goomba[i].dead() && goomba[i].isOn(sp.getX(), sp.getY()+32) || goomba[i].isOn(sp.getX()+24, sp.getY()+32)) {
			goomba[i].setAlive();
			sp.setDirection(1);
		}
		
		if(!goomba[i].dead() && goomba[i].isHitLeft(sp.getX()+24, sp.getY()+16)){
			sp.setMoveVar(0);
			sp.damage();
		}
		
		if(!goomba[i].dead() && goomba[i].isHitRight(sp.getX(), sp.getY()+16)){
			sp.setMoveVar(0);
			sp.damage();
		}
		for(int j = 0; j < numBlocks; j++)  {
			if(!goomba[i].dead() && goomba[i].isHitLeft(blk[j].getXpos()+20, blk[j].getYpos())){
				goomba[i].setMoveVar(-goomba[i].getMoveVar());
			}
		
			if(!goomba[i].dead() && goomba[i].isHitRight(blk[j].getXpos(), blk[j].getYpos())){
				goomba[i].setMoveVar(-goomba[i].getMoveVar());
			}
		}
	}
}

void Level::scrollScreen()  {

	if(sp.getX() > 350)  {
		mapDistMove += sp.getX() - 350;
		
		for(int i = 0; i < numBlocks; i++)  {
			blk[i].setXpos(blk[i].getXpos() - sp.getX() + 350);
		}
		
		for(int i = 0; i < numGoombas; i++)  {
			goomba[i].setX(goomba[i].getX() - sp.getX() + 350);
		}
		
		sp.setX(350);
	}

}








